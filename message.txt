<template>
  <div class="container">
    <input
      type="text"
      v-model="searchQuery"
      @input="searchMovies"
      placeholder="Buscar por título..."
    />
    <div class="filters">
      <label for="genreFilter">Filtrar por Género:</label>
      <select id="genreFilter" v-model="selectedGenre" @change="filterMovies">
        <option value="">Todos</option>
        <option
          v-for="genre in popularGenres"
          :value="genre.id"
          :key="genre.id"
        >
          {{ genre.name }}
        </option>
      </select>
    </div>
    <ul class="movies-grid">
      <li class="movie-item" v-for="movie in filteredMovies" :key="movie.id">
        <img
          :src="`https://image.tmdb.org/t/p/w200${movie.poster_path}`"
          :alt="movie.title"
        />
        <h2>{{ movie.title }}</h2>
        <p>{{ truncateOverview(movie.overview) }}</p>
        <p>Puntuación: {{ movie.vote_average.toFixed(2) }}</p>
        <p class="date">{{ movie.release_date }}</p>
        <router-link to="/movie-detail/" class="btn">Ver más</router-link>
      </li>
    </ul>
  </div>
</template>

<script>
import axios from "axios";

export default {
  name: "MovieList",
  data() {
    return {
      movies: [],
      filteredMovies: [],
      searchQuery: "",
      selectedGenre: "",
      popularGenres: [
        { id: 28, name: "Acción" },
        { id: 35, name: "Comedia" },
        { id: 18, name: "Drama" },
        { id: 878, name: "Ciencia ficción" },
      ],
    };
  },
  mounted() {
    this.fetchMovies();
  },
  methods: {
    async fetchMovies() {
      const apiKey = "3d99b0a7bfcc1d3dc8941f2d4fa9621c";
      try {
        const response = await axios.get(
          `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=es-ES`
        );
        this.movies = response.data.results.slice(0, 10);
        this.filteredMovies = [...this.movies];
      } catch (error) {
        console.error("Error fetching movies:", error);
      }
    },
    truncateOverview(overview) {
      const maxLength = 50;
      if (overview.length > maxLength) {
        return overview.substring(0, maxLength) + "...";
      }
      return overview;
    },
    searchMovies() {
      if (this.searchQuery.trim() === "") {
        this.filteredMovies = [...this.movies];
      } else {
        const searchTerm = this.searchQuery.trim().toLowerCase();
        this.filteredMovies = this.movies.filter((movie) =>
          movie.title.toLowerCase().includes(searchTerm)
        );
      }
    },
    filterMovies() {
      let filtered = [...this.movies];

      // Filtrar por género
      if (this.selectedGenre) {
        filtered = filtered.filter((movie) =>
          movie.genre_ids.includes(parseInt(this.selectedGenre))
        );
      }

      if (this.searchQuery.toLowerCase().trim() !== "") {
        const searchTerm = this.searchQuery.trim().toLowerCase();
        filtered = filtered.filter((movie) =>
          movie.title.toLowerCase().includes(searchTerm)
        );
      }

      this.filteredMovies = filtered;
    },
  },
};
</script>

<style scoped>
.container{
  width: 60%;
  margin: 0px auto;
}
.movies-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  row-gap: 2rem;
  list-style: none;
  padding: 0;
  justify-content: center;
  width: 100%;
  margin: 40px auto;
}
.movie-item{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #333;
  color: white;
  border-radius: 20px;
  width: 90%;
  margin: 0px auto;
}
.movie-item img {
  max-width: 100%;
  height: auto;
  border-radius: 4px;
}

.movie-item h2 {
  font-size: 2rem;
  min-height: 100px;
  margin: 12px 0 8px;
}

.movie-item p {
  padding: 0 1rem;
  font-size: 16px;
  margin: 4px 0;
  min-height: 50px;
}
.movie-item .date{
  font-size: 1.3rem;
  margin: 4px 0;
}
input[type="text"] {
  width: 90%;
  padding: 10px;
  font-size: 16px;
  margin-bottom: 16px;
  border-radius: 6px;
  border: 1px solid #ccc;
  background-color: #fff;
  color: #333;
}
.filters {
  display: flex;
  margin-bottom: 16px;
  justify-content: center;
  align-items: center;
  width: 90%;
  margin: 0px auto;
}
.filters label{
  font-size: 20px;
}
.filters select{
  width: 40%;
  padding: 10px;
  font-size: 16px;
  border-radius: 6px;

  border: 1px solid #ccc;
  background-color: #fff;
  color: #333;
}
select option {
  font-size: 20px;
  color: #333;
  padding: 10px;
}
.btn{
  background-color: red;
  color: white;
  font-size: 16px;
  width: 100%;
  height: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 10px;
  border-radius:  0px 0px 12px 12px;
  text-decoration: none;
}
input{
  width: 100% !important;
  margin: 1rem 0rem;
}
#genreFilter{
  margin: 1rem 0rem;
  width: 100% !important;
}

@media (max-width: 600px) {
  .container{
    width: 95%;
  }
  .movies-grid {
    grid-template-columns: 1fr;
    width: 90%;
    gap: 30px;
  }

  .movie-item {
    width: 100%;
  }

  input[type="text"],
  #genreFilter {
    width: 100%;
  }
  .btn {
    font-size: 16px;
    height: 60px;
  }
}
@media (min-width: 600px) and (max-width: 1024px) {
  .container{
    width: 95%;
  }
  .movies-grid {
    grid-template-columns: repeat(2, 1fr);
    width: 90%;
    gap: 30px;
  }

  .movie-item {
    width: 100%;
  }

  input[type="text"],
  #genreFilter {
    width: 100%;
  }
  .btn {
    font-size: 16px;
    height: 60px;
  }
}
</style>



